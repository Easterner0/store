name: Build and Distribute APK

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Check if signing secrets exist
      run: |
        if [[ -n "${{ secrets.KEYSTORE_FILE }}" && -n "${{ secrets.KEYSTORE_PASSWORD }}" && -n "${{ secrets.KEY_ALIAS }}" && -n "${{ secrets.KEY_PASSWORD }}" ]]; then
          echo "HAS_SIGNING_SECRETS=true" >> $GITHUB_ENV
        else
          echo "HAS_SIGNING_SECRETS=false" >> $GITHUB_ENV
        fi

    - name: Decrypt keystore (if signing required)
      if: env.HAS_SIGNING_SECRETS == 'true'
      run: |
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > release-key.jks

    - name: Build APK
      run: ./gradlew assembleRelease

    - name: Sign APK (if needed)
      if: env.HAS_SIGNING_SECRETS == 'true'
      run: |
        jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
          -keystore release-key.jks \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          app/build/outputs/apk/release/app-release-unsigned.apk "${{ secrets.KEY_ALIAS }}"

    - name: Verify APK Alignment
      if: env.HAS_SIGNING_SECRETS == 'true'
      run: |
        zipalign -v 4 app/build/outputs/apk/release/app-release-unsigned.apk app-release-signed.apk

    - name: Upload APK as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: app-release-signed.apk
        path: app-release-signed.apk

    - name: Upload to GitHub Releases
      if: secrets.PAT_TOKEN
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        gh release create "v1.0.${{ github.run_number }}" app-release-signed.apk \
        --title "Release v1.0.${{ github.run_number }}" \
        --notes "Automated APK Build and Release"
